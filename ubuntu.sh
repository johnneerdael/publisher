#!/bin/bash

# Exit on any error
set -e

# Progress file to track steps
PROGRESS_FILE="/var/log/upgrade_progress.log"

# Set default S3 path if not provided
if [ "$S3_PUBLISHER_GENERIC_PATH" = "" ]; then
    S3_PUBLISHER_GENERIC_PATH="https://raw.githubusercontent.com/johnneerdael/publisher/refs/heads/main"
fi

HARDENING_SSH="hardening_ssh_yes"

# Enhanced logging functions
log_step() {
    local step=$1
    local message=${2:-"Starting $step"}
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $step - $message" >> "$PROGRESS_FILE"
    echo "$step" > "${PROGRESS_FILE}.current"
    echo "$message"
}

log_info() {
    local message=$1
    echo "$(date '+%Y-%m-%d %H:%M:%S') - INFO - $message" >> "$PROGRESS_FILE"
    echo "$message"
}

resume_from() {
    if [ -f "${PROGRESS_FILE}.current" ]; then
        cat "${PROGRESS_FILE}.current"
    else
        echo "start"
    fi
}

# Function to check if reboot is required
check_reboot() {
    if [ -f /var/run/reboot-required ]; then
        log_info "Reboot required. System will reboot in 5 seconds..."
        sync
        log_step "reboot_initiated" "System reboot required and initiated"
        sleep 5
        reboot
        exit 0
    fi
    return 0
}

# Function to create reboot script with better logging
setup_reboot_handler() {
    log_info "Setting up reboot handler..."
    mkdir -p /var/lib/system-upgrade
    
    cat > /var/lib/system-upgrade/upgrade-resume.sh << 'EOF'
#!/bin/bash
if [ -f /var/log/upgrade_progress.log.current ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Resuming upgrade after reboot..." >> /var/log/upgrade_progress.log
    /usr/local/bin/upgrade-script.sh
fi
EOF
    chmod +x /var/lib/system-upgrade/upgrade-resume.sh
    
    cat > /etc/systemd/system/upgrade-resume.service << EOF
[Unit]
Description=Resume system upgrade after reboot
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/var/lib/system-upgrade/upgrade-resume.sh
RemainAfterExit=yes
StandardOutput=append:/var/log/upgrade_progress.log
StandardError=append:/var/log/upgrade_progress.log

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable upgrade-resume.service
    log_info "Reboot handler setup completed"
}

# Function to check if system is CentOS
is_cent_os() {
    [ -f /etc/redhat-release ]
}

# Function to fix DNS configuration
fix_dns_configuration() {
    echo "Fixing DNS configuration..."
    
    # Remove immutable flag if it exists
    if [ -f /etc/resolv.conf ]; then
        chattr -i /etc/resolv.conf 2>/dev/null || true
    fi
    
    # First, back up existing resolv.conf if it's not a symlink
    if [ -f /etc/resolv.conf ] && [ ! -L /etc/resolv.conf ]; then
        cp /etc/resolv.conf /etc/resolv.conf.backup
    else
        # If it's a symlink, capture the current resolved DNS settings before disabling
        if command -v resolvectl &>/dev/null; then
            resolvectl dns > /etc/resolv.conf.backup 2>/dev/null || true
        fi
    fi
    
    # Stop and disable systemd-resolved
    systemctl stop systemd-resolved 2>/dev/null || true
    systemctl disable systemd-resolved 2>/dev/null || true

    # Remove the symlink if it exists
    if [ -L /etc/resolv.conf ]; then
        rm /etc/resolv.conf
    fi

    # Restore original DNS configuration if we have a backup
    if [ -f /etc/resolv.conf.backup ]; then
        if grep -q "Global:" /etc/resolv.conf.backup 2>/dev/null; then
            grep -oP "[\d.]+$" /etc/resolv.conf.backup | while read ns; do
                echo "nameserver $ns"
            done > /etc/resolv.conf
        else
            cp /etc/resolv.conf.backup /etc/resolv.conf
        fi
    fi

    # Check if we have a valid DNS configuration
    if [ ! -f /etc/resolv.conf ] || [ ! -s /etc/resolv.conf ] || ! host s3-us-west-2.amazonaws.com >/dev/null 2>&1; then
        echo "No valid DNS configuration found, setting up fallback DNS..."
        cat > /etc/resolv.conf << EOF
# Generated by bootstrap script - using Quad9 unsecured DNS
options timeout:1 attempts:1
nameserver 9.9.9.10
nameserver 149.112.112.10
EOF
    fi

    # Final DNS verification
    if ! host s3-us-west-2.amazonaws.com >/dev/null 2>&1; then
        echo "WARNING: DNS resolution verification failed. Please check network configuration."
        return 1
    fi
    
    # Make resolv.conf immutable to prevent overwrites
    chattr +i /etc/resolv.conf 2>/dev/null || true
    return 0
}

# Function to fix system configuration issues
fix_system_configuration() {
    log_step "fixing_system_configuration"
    echo "Fixing system configuration..."
    
    # Fix hostname resolution
    local hostname=$(hostname)
    if ! grep -q "$hostname" /etc/hosts; then
        echo "127.0.0.1 $hostname" >> /etc/hosts
    fi
    
    # Fix DNS configuration
    fix_dns_configuration
    
    # Configure journald to persist logs
    mkdir -p /var/log/journal
    systemctl restart systemd-journald || true

    # Fix network configuration
    systemctl restart systemd-networkd || true
    
    check_reboot
}

# Function to install minimal essential packages
install_minimal_packages() {
    log_step "installing_minimal_packages"
    echo "Installing minimal essential packages..."
    
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y wget dnsutils curl nano || {
        echo "Failed to install wget and host, exiting..."
        return 1
    }

    check_reboot
    echo "Successfully installed wget"
    return 0
}

# Function to download Netskope files
download_netskope_files() {
    log_step "downloading_netskope_files"
    echo "Downloading Netskope files..."
    
    # Download service file
    if ! wget "$S3_PUBLISHER_GENERIC_PATH/npa-publisher.ubuntu.service" -O npa-publisher.service; then
        log_info "Failed to download npa-publisher.ubuntu.service"
        return 1
    fi
    
    # Download provision script
    if ! wget "$S3_PUBLISHER_GENERIC_PATH/provision_shared.sh" -O provision_shared.sh; then
        log_info "Failed to download provision_shared.sh"
        return 1
    fi
    
    # Download cleanup script
    if ! wget "$S3_PUBLISHER_GENERIC_PATH/cleanup.sh" -O cleanup.sh; then
        log_info "Failed to download cleanup.sh"
        return 1
    fi
    
    # Make scripts executable
    chmod +x provision_shared.sh
    chmod +x cleanup.sh
    
    log_info "Successfully downloaded all required files"
    return 0
}

# Function to modify provision_shared.sh
modify_provision_script() {
    log_step "modifying_provision_script"
    echo "Modifying provision_shared.sh to skip package updates..."
    
    # Create a backup
    cp provision_shared.sh provision_shared.sh.bak
    
    # Comment out the update_packages function call
    sed -i 's/^update_packages/#update_packages/' provision_shared.sh
}

# Function to perform system upgrade
perform_system_upgrade() {
    log_step "performing_system_upgrade"
    echo "Performing system upgrade..."
    
    # Configure environment for non-interactive upgrade
    export DEBIAN_FRONTEND=noninteractive
    export APT_LISTCHANGES_FRONTEND=none
    export DEBCONF_NONINTERACTIVE_SEEN=true
    
    # Pre-configure debconf selections
    cat > /tmp/debconf-selections << EOF
debconf debconf/frontend select Noninteractive
debconf debconf/priority select critical
grub-pc grub-pc/install_devices_empty boolean false
grub-pc grub-pc/install_devices multiselect /dev/nvme0n1p15
grub-efi-amd64 grub2/update_nvram boolean true
grub-efi-amd64-signed grub2/force_efi_extra_removable boolean false
sudo sudo/error_delete_home_directory boolean true
sudo sudo/error_delete_nonexistent_home boolean true
EOF
    debconf-set-selections /tmp/debconf-selections

    # Create dpkg configuration to force automated responses
    cat > /etc/apt/apt.conf.d/99force-conf << EOF
Dpkg::Options {
   "--force-confdef";
   "--force-confnew";
   "--force-confold";
   "--force-confmiss";
}
Dpkg::Get::AutomaticRemove "true";
DPkg::Options {
   "--force-overwrite";
   "--force-overwrite-dir";
}
APT::Get::Assume-Yes "true";
APT::Get::allow-downgrades "true";
APT::Get::allow-remove-essential "true";
APT::Get::allow-change-held-packages "true";
EOF
    
    # Install update-manager-core if not present
    log_step "installing_update_manager"
    UCF_FORCE_CONFFNEW=yes apt-get install -y -o Dpkg::Options::="--force-confnew" update-manager-core
    check_reboot

    # First upgrade the current release fully
    log_step "updating_current_release"
    apt-get update
    UCF_FORCE_CONFFNEW=yes DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confnew" dist-upgrade
    check_reboot
    
    # Get current Ubuntu version
    local current_version=$(lsb_release -rs)
    echo "Current Ubuntu version: $current_version"

    if [[ "$current_version" == "20.04" ]]; then
        log_step "upgrading_to_22.04"
        echo "Upgrading to Ubuntu 22.04 first..."
        # Modify release-upgrades configuration
        sed -i 's/Prompt=lts/Prompt=normal/g' /etc/update-manager/release-upgrades
        
        # Update necessary packages
        UCF_FORCE_CONFFNEW=yes apt-get install -y -o Dpkg::Options::="--force-confnew" ubuntu-release-upgrader-core

        # Perform upgrade to 22.04
        UCF_FORCE_CONFFNEW=yes DEBIAN_FRONTEND=noninteractive do-release-upgrade -f DistUpgradeViewNonInteractive
        check_reboot

        # Let system stabilize
        sleep 30

        # Re-check version
        current_version=$(lsb_release -rs)
        echo "Version after first upgrade: $current_version"
    fi

    if [[ "$current_version" == "22.04" ]]; then
        log_step "upgrading_to_24.04"
        echo "Upgrading to Ubuntu 24.04..."
        # Update necessary packages again
        apt-get update
        UCF_FORCE_CONFFNEW=yes apt-get install -y -o Dpkg::Options::="--force-confnew" ubuntu-release-upgrader-core

        # Perform upgrade to 24.04
        UCF_FORCE_CONFFNEW=yes DEBIAN_FRONTEND=noninteractive do-release-upgrade -f DistUpgradeViewNonInteractive
        check_reboot
    fi
    
    # After upgrade is complete, continue with Netskope setup
    log_step "downloading_netskope_files"

    # Clean up
    log_step "cleanup"
    apt-get -y autoremove
    apt-get clean
    
    # Remove temporary configurations
    rm -f /tmp/debconf-selections
}

# Main execution flow with checkpoint recovery and enhanced logging
main() {
    # Create directory for upgrade scripts
    mkdir -p /var/lib/system-upgrade

    # Copy this script to a permanent location
    cp "$0" /usr/local/bin/upgrade-script.sh
    chmod +x /usr/local/bin/upgrade-script.sh

    # Setup reboot handler
    setup_reboot_handler

    # Get the current step
    CURRENT_STEP=$(resume_from)
    log_info "Resuming from step: $CURRENT_STEP"

    case $CURRENT_STEP in
        "start"|""|"completed")
            log_step "start" "Beginning upgrade process"
            if is_cent_os; then
                log_info "CentOS detected - proceeding with CentOS installation"
                yum -y install wget
                wget "$S3_PUBLISHER_GENERIC_PATH/npa-publisher.centos.service" -O npa-publisher.service
                log_step "centos_setup_complete"
            else
                log_info "Ubuntu detected - starting system upgrade"
                # Install minimal package needed for upgrade
                apt-get update || log_info "Warning: apt-get update failed"
                DEBIAN_FRONTEND=noninteractive apt-get install -y wget dnsutils curl nano || log_info "Warning: package installation failed"
                perform_system_upgrade
            fi
            ;&

        "performing_system_upgrade"|"upgrading_to_22.04"|"upgrading_to_24.04"|"downloading_netskope_files"|"modifying_provision_script"|"executing_provision")
            if [ "$CURRENT_STEP" != "downloading_netskope_files" ] && [ "$CURRENT_STEP" != "modifying_provision_script" ] && [ "$CURRENT_STEP" != "executing_provision" ]; then
                log_info "System upgrade completed, proceeding with system configuration"
                fix_system_configuration || log_info "Warning: system configuration failed"
                check_reboot
            fi
            
            # Always proceed with Netskope setup
            log_info "Starting Netskope installation process"
            log_step "downloading_netskope_files" "Downloading Netskope publisher files"
            
            if ! download_netskope_files; then
                log_info "ERROR: Failed to download Netskope files, retrying..."
                sleep 5
                if ! download_netskope_files; then
                    log_info "ERROR: Second attempt to download Netskope files failed"
                    exit 1
                fi
            fi
            
            log_step "modifying_provision_script" "Modifying provision script"
            if ! modify_provision_script; then
                log_info "ERROR: Failed to modify provision script"
                exit 1
            fi
            check_reboot
            
            log_step "executing_provision" "Running Netskope provisioning"
            export DEBIAN_FRONTEND=noninteractive
            log_info "Removing interactive prompts from provision script"
            sed -i 's/^read.*//g' provision_shared.sh
            
            log_info "Executing provision_shared.sh"
            if ! ./provision_shared.sh "$HARDENING_SSH"; then
                log_info "WARNING: provision_shared.sh completed with non-zero status"
            fi
            
            log_info "Executing cleanup script"
            if ! ./cleanup.sh; then
                log_info "WARNING: cleanup.sh completed with non-zero status"
            fi
            
            log_step "netskope_complete" "Netskope installation completed"
            ;;
    esac

    log_step "completed" "Upgrade process completed successfully"
    log_info "System upgrade completed successfully"
}

# Execute main function
main